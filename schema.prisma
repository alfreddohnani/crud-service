// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model KpilensSuperAdmin {
  id       String @id @default(cuid())
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Organisation {
  id                                   String      @id @default(cuid())
  name                                 String      @default("")
  registrationNumber                   String      @unique @default("")
  dataProtectionPolicyCountry          Json?
  hasLawfulBasisToCollectData          Boolean     @default(false)
  dataSubjects                         String      @default("")
  purposeOfDataCollectionAndProcessing String      @default("")
  address                              String      @default("")
  numberOfEmployees                    String      @default("")
  countryOfOperation                   Json?
  email                                String      @unique @default("")
  organisationType                     String?
  createdAt                            DateTime?   @default(now())
  updatedAt                            DateTime?   @updatedAt
  freeTrialExpirationDate              DateTime?   @default("2022-04-19T06:33:12.703Z")
  isPaying                             Boolean     @default(false)
  users                                User[]      @relation("User_organisation")
  teams                                Team[]      @relation("Team_organisation")
  owner                                User?       @relation("Organisation_owner", fields: [ownerId], references: [id])
  ownerId                              String?     @map("owner")
  workspaces                           Workspace[] @relation("Workspace_organisation")
  projects                             Project[]   @relation("Project_organisation")

  @@index([ownerId])
}

model Project {
  id             String        @id @default(cuid())
  name           String        @unique @default("")
  description    String        @default("")
  workspace      Workspace?    @relation("Project_workspace", fields: [workspaceId], references: [id])
  workspaceId    String?       @map("workspace")
  startDate      DateTime?
  endDate        DateTime?
  surveys        Survey[]      @relation("Survey_project")
  organisation   Organisation? @relation("Project_organisation", fields: [organisationId], references: [id])
  organisationId String?       @map("organisation")
  users          User[]        @relation("Project_users")
  isArchived     Boolean       @default(false)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([workspaceId])
  @@index([organisationId])
}

model Survey {
  id          String           @id @default(cuid())
  name        String           @unique @default("")
  schema      String           @default("")
  widgets     String           @default("")
  project     Project?         @relation("Survey_project", fields: [projectId], references: [id])
  projectId   String?          @map("project")
  publishId   String           @default("")
  isPublished Boolean          @default(false)
  createdAt   DateTime?        @default(now())
  updatedAt   DateTime?        @updatedAt
  author      User?            @relation("Survey_author", fields: [authorId], references: [id])
  authorId    String?          @map("author")
  responses   SurveyResponse[] @relation("SurveyResponse_survey")

  @@index([projectId])
  @@index([authorId])
}

model SurveyResponse {
  id        String    @id @default(cuid())
  survey    Survey?   @relation("SurveyResponse_survey", fields: [surveyId], references: [id])
  surveyId  String?   @map("survey")
  response  String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([surveyId])
}

model Team {
  id             String        @id @default(cuid())
  members        User[]        @relation("Team_members")
  organisation   Organisation? @relation("Team_organisation", fields: [organisationId], references: [id])
  organisationId String?       @map("organisation")

  @@index([organisationId])
}

model User {
  id                      String         @id @default(cuid())
  firstname               String         @default("")
  lastname                String         @default("")
  email                   String         @unique @default("")
  password                String         @default("")
  title                   String         @default("")
  isOwner                 Boolean        @default(false)
  createdAt               DateTime?      @default(now())
  updatedAt               DateTime?      @updatedAt
  hasVerifiedEmail        Boolean        @default(false)
  teams                   Team[]         @relation("Team_members")
  organisation            Organisation?  @relation("User_organisation", fields: [organisationId], references: [id])
  organisationId          String?        @map("organisation")
  workspaces              Workspace[]    @relation("Workspace_users")
  projects                Project[]      @relation("Project_users")
  hostInvites             Invite[]       @relation("Invite_host")
  guestInvites            Invite[]       @relation("Invite_guest")
  from_Organisation_owner Organisation[] @relation("Organisation_owner")
  from_Survey_author      Survey[]       @relation("Survey_author")

  @@index([organisationId])
}

model Workspace {
  id             String        @id @default(cuid())
  name           String        @unique @default("")
  description    String        @default("")
  organisation   Organisation? @relation("Workspace_organisation", fields: [organisationId], references: [id])
  organisationId String?       @map("organisation")
  projects       Project[]     @relation("Project_workspace")
  users          User?         @relation("Workspace_users", fields: [usersId], references: [id])
  usersId        String?       @map("users")
  isArchived     Boolean       @default(false)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([organisationId])
  @@index([usersId])
}

model Invite {
  id         String    @id @default(cuid())
  resource   String?
  resourceId String    @default("")
  guest      User?     @relation("Invite_guest", fields: [guestId], references: [id])
  guestId    String?   @map("guest")
  host       User?     @relation("Invite_host", fields: [hostId], references: [id])
  hostId     String?   @map("host")
  guestRole  String?
  status     String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@index([guestId])
  @@index([hostId])
}